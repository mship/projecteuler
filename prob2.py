# going through first 100 problems of Project Euler in Python
# by Michael Shippee
# Here is the problem:
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# opted to do this with a simple functional programming table, functional_fib
functional_fib = [1, 2]
next = 0
retval = 2

while(functional_fib[-1] < 4000000):
    next = functional_fib[-1] + functional_fib[-2] # generate our next fib number
    if(next > 4000000): # if next is greater than our limit, break. without this, loop doesn't stop until one step too late
        break
    functional_fib.append(next) # add our next fib number
    if(next%2 == 0): # check if even, then update retval
        retval += next

print(retval) #effectively return - returns 4613732